#include <iostream>
#include <QApplication>
#include <QGridLayout>
#include <QLabel>
#include <QVBoxLayout>
#include <QWidget>
#include <cstdlib> // Incluindo a biblioteca para usar std::rand()

class Barco {
public:
    Barco(int linha, int coluna) : linha(linha), coluna(coluna) {}

private:
    int linha;
    int coluna;
};

template <typename BarcoType>
class Tabuleiro : public QWidget {
public:
    Tabuleiro(QWidget* parent = nullptr) : QWidget(parent) {
        gridLayout = new QGridLayout(this);
        gridLayout->setSpacing(0);
        gridLayout->setContentsMargins(0, 0, 0, 0);

        // Inicializa o tabuleiro vazio
        for (int i = 0; i < 10; ++i) {
            for (int j = 0; j < 10; ++j) {
                QLabel* label = new QLabel(this);
                label->setFrameStyle(QFrame::Box);
                label->setAlignment(Qt::AlignCenter);
                gridLayout->addWidget(label, i, j);
                celulas[i][j] = label;
            }
        }
    }

    void colocarBarco(int linha, int coluna, BarcoType* barco) {
        if (linha >= 0 && linha < 10 && coluna >= 0 && coluna < 10) {
            QLabel* label = celulas[linha][coluna];

        }
    }

private:
    QGridLayout* gridLayout;
    QLabel* celulas[10][10];
};

int main(int argc, char** argv) {
    QApplication app(argc, argv);

    // Criação do tabuleiro widget para o tabuleiro aleatório
    Tabuleiro<Barco> tabuleiroOponente;

    // Coloca os barcos no tabuleiro aleatoriamente
    for (int i = 0; i < 3; ++i) {
        int linha = std::rand() % 10; // Gera uma posição aleatória de linha
        int coluna = std::rand() % 10; // Gera uma posição aleatória de coluna
        Barco* novoBarco;
        if (i == 0)
            novoBarco = new Barco(1, 2);   // Tamanho 1x2
        else if (i == 1)
            novoBarco = new Barco(1, 5);   // Tamanho 1x5
        else
            novoBarco = new Barco(1, 3);   // Tamanho 1x3
        tabuleiroOponente.colocarBarco(linha, coluna, novoBarco);
    }

    // Criação do tabuleiro widget para o tabuleiro com os barcos
    Tabuleiro<Barco> tabuleiroJogador;

    // Solicita ao usuário a posição para o barco1
    int linha, coluna;
    std::cout << "Digite a posição (linha coluna) para o barco1 (1x2): ";
    std::cin >> linha >> coluna;

    // Cria o barco1 e coloca no tabuleiro com os barcos
    Barco* barco1 = new Barco(1, 2);   // Tamanho 1x2
    tabuleiroJogador.colocarBarco(linha, coluna, barco1);

    // Cria janelas para exibir os tabuleiros
    QWidget tabuleiroOponenteWindow;
    tabuleiroOponenteWindow.setLayout(new QVBoxLayout);
    tabuleiroOponenteWindow.layout()->addWidget(&tabuleiroOponente);
    tabuleiroOponenteWindow.setWindowTitle("Tabuleiro do Oponente");
    tabuleiroOponenteWindow.setGeometry(100, 100, 400, 400);
    tabuleiroOponenteWindow.show();

    QWidget tabuleiroJogadorWindow;
    tabuleiroJogadorWindow.setLayout(new QVBoxLayout);
    tabuleiroJogadorWindow.layout()->addWidget(&tabuleiroJogador);
    tabuleiroJogadorWindow.setWindowTitle("Tabuleiro do Jogador");
    tabuleiroJogadorWindow.setGeometry(600, 100, 400, 400);
    tabuleiroJogadorWindow.show();

    return app.exec();
}
